#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/f961e945-fa81-4651-8c8c-3d13c948197f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float anomaly_val;
  bool no_issues;
  bool state;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "definitions.h"
#include <Opla_heat_pump_inferencing.h>
#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;

#define CONVERT_G_TO_MS2    9.80665f
#define FREQUENCY_HZ        104
#define INTERVAL_MS         (1000 / (FREQUENCY_HZ + 1))
static unsigned long last_interval_ms = 0;

// to classify 1 frame of data you need EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE values
float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE];
// keep track of where we are in the feature array
size_t feature_ix = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //Wait to get cloud connection to init the carrier
  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    delay(500);
  }
  delay(500);
  CARRIER_CASE = true;
  carrier.begin();
  //carrier.display.setRotation(0);
  delay(1500);
}

void loop() {
  ArduinoCloud.update();
  
  //get accelerometer data
  float x, y, z;
  
  if (carrier.IMUmodule.accelerationAvailable()) {
    if (millis() > last_interval_ms + INTERVAL_MS) {
        last_interval_ms = millis();
        
      carrier.IMUmodule.readAcceleration(x, y, z);
      // fill the features buffer
      features[feature_ix++] = x * CONVERT_G_TO_MS2;
      features[feature_ix++] = y * CONVERT_G_TO_MS2;
      features[feature_ix++] = z * CONVERT_G_TO_MS2;

      // features buffer full? then classify!
      if (feature_ix == EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
        ei_impulse_result_t result;

        // create signal from features frame
        signal_t signal;
        numpy::signal_from_buffer(features, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);

        // run classifier
        EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false);
        if (res != 0) {
          Serial.println("EI classifier did not return 0!");
          return;
        }
        
        //if on inference is > 0.7, set state to on...off is 0, on is 1 in array
        if(result.classification[1].value > 0.70) {
          state = true;
        }
        else {
          state = false;
        }
        //get absolute value of the anomaly
        anomaly_val = abs(result.anomaly);
        //if it's greater than 0.4, turn on the red leds
        if(anomaly_val > 0.4)
        {
          uint32_t redColor = carrier.leds.Color( 0, 255, 0);
          carrier.leds.fill(redColor, 0, 5);
          carrier.leds.show();
          no_issues = false;
        }
        else {
          uint32_t noColor = carrier.leds.Color( 0, 0, 0);
          carrier.leds.fill(noColor, 0, 5);
          carrier.leds.show();
          no_issues = true;
        }
        
        // reset features frame
        feature_ix = 0;
      }
    }
  }
}












